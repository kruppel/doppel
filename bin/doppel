#!/usr/bin/env node

var fs = require('fs')
  , path = require('path')
  , _ = require('underscore')
  , optimist = require('optimist')
  , doppel = require('./../lib/doppel')
  , pkg = require('./../package.json')
  , executable;

exec = function (callback) {
  var argv
    , data
    , paths;

  optimist.usage(
    'usage: $0 -d context source_dir destination_dir\n' +
    '       $0 -F context_file source_dir destination_dir'
  );
  argv = optimist.options({
    'd': {
      describe: 'Sets template data (via JSON string)'
    , alias: 'data'
    }
  , 'F': {
      describe: 'Sets template data (via input file)'
    , alias: 'file'
    }
  , 'x': {
      describe: 'Sets template file extension'
    , alias: 'extension'
    }
  , 'e': {
      describe: 'Sets template engine'
    , alias: 'engine'
    , default: 'underscore'
    }
  , 'V': {
      describe: 'Prints doppel version'
    , alias: 'version'
    }
  , 'help': {
      describe: 'Displays help information'
    }
  }).argv;

  if (argv.help) {
    optimist.showHelp();

    callback();
  }
  else if (argv.version) {
    console.log(pkg.version);

    callback();
  }

  paths = argv._;
  if (paths.length < 2) {
    callback(new Error('Source and destination directories must be provided.'));
  }

  data = argv.data ? JSON.parse(argv.data) :
    argv.file ? require(path.join(process.cwd(), argv.file)) : undefined;
  if (!data) {
    callback(new Error('Template data must be provided.'));
  }

  doppel.use(argv.engine, { extension: argv.extension });
  doppel(paths[0], paths[1], data, callback);
};

try {
  exec(function (err) {
    if (err) {
      console.error(err.message || err.stack);

      process.exit(1);
    }

    process.exit(0);
  });
}
catch (e) {
  console.error(e.stack);

  process.exit(1);
}
